name: CI/CD Pipeline for User Service

on:
  push:
    branches:
      - main
      - 'feature/**'
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code for User Service
        uses: actions/checkout@v2

      - name: Cache Maven packages
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Install JDK 17
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Maven
        run: sudo apt-get install -y maven

      - name: Build the application
        run: mvn clean package

      - name: Create Docker Network
        run: docker network create auth_net

      - name: Set up Docker Compose for User Service
        working-directory: .
        run: docker-compose up -d --build

      - name: Wait for User Service to be ready
        run: sleep 90  # Increased wait time to allow service to start

      - name: Capture logs for User Service
        working-directory: .
        run: docker logs user-service

      - name: List running containers
        run: docker ps -a

      - name: Run Java Tests
        run: mvn test

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      - name: List files for debugging
        run: ls -R

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r scripts/requirements.txt
      

      - name: Run Python Tests
        run: |
          pytest --cov=./ --cov-report=xml

      - name: Ensure Code Coverage is Sufficient
        run: |
          coverage report --fail-under=80  # Set minimum coverage threshold to 80%
          coverage xml

      - name: Force remove any containers still running
        run: |
          docker stop $(docker ps -q) || true  # Stop any running containers, ignore errors if none are running
          docker rm $(docker ps -a -q) || true  # Force removal of all containers

      - name: Final cleanup for Docker networks
        run: |
          docker network prune -f

      - name: List all containers and networks
        run: |
          docker ps -a
          docker network ls
